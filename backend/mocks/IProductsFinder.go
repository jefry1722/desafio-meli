// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"desafiomeli/src/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIProductsFinder creates a new instance of MockIProductsFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIProductsFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIProductsFinder {
	mock := &MockIProductsFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIProductsFinder is an autogenerated mock type for the IProductsFinder type
type MockIProductsFinder struct {
	mock.Mock
}

type MockIProductsFinder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIProductsFinder) EXPECT() *MockIProductsFinder_Expecter {
	return &MockIProductsFinder_Expecter{mock: &_m.Mock}
}

// GetProductDetailByID provides a mock function for the type MockIProductsFinder
func (_mock *MockIProductsFinder) GetProductDetailByID(s string) (*entities.Product, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for GetProductDetailByID")
	}

	var r0 *entities.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*entities.Product, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *entities.Product); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIProductsFinder_GetProductDetailByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductDetailByID'
type MockIProductsFinder_GetProductDetailByID_Call struct {
	*mock.Call
}

// GetProductDetailByID is a helper method to define mock.On call
//   - s
func (_e *MockIProductsFinder_Expecter) GetProductDetailByID(s interface{}) *MockIProductsFinder_GetProductDetailByID_Call {
	return &MockIProductsFinder_GetProductDetailByID_Call{Call: _e.mock.On("GetProductDetailByID", s)}
}

func (_c *MockIProductsFinder_GetProductDetailByID_Call) Run(run func(s string)) *MockIProductsFinder_GetProductDetailByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIProductsFinder_GetProductDetailByID_Call) Return(product *entities.Product, err error) *MockIProductsFinder_GetProductDetailByID_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockIProductsFinder_GetProductDetailByID_Call) RunAndReturn(run func(s string) (*entities.Product, error)) *MockIProductsFinder_GetProductDetailByID_Call {
	_c.Call.Return(run)
	return _c
}
